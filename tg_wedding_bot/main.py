# telegram_wedding_bot/main.py
# Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ —Ñ–æ—Ç–æ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–∞ —Å–≤–∞–¥—å–±—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–∞—Ä–æ–π —Ñ–æ—Ç–æ+—Ç–µ–∫—Å—Ç
# –¢—Ä–µ–±—É–µ—Ç—Å—è: aiogram v3, aiosqlite, python-dotenv

import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile
import aiosqlite
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv('BOT_TOKEN')  # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
DB_PATH = os.getenv('DB_PATH', 'wishes.db')
UPLOAD_DIR = os.getenv('UPLOAD_DIR', 'uploads')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', ''))  # chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ
async def init_db():
    os.makedirs(UPLOAD_DIR, exist_ok=True)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            '''
            CREATE TABLE IF NOT EXISTS wishes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                photo_path TEXT NOT NULL,
                message TEXT NOT NULL,
                status TEXT NOT NULL DEFAULT 'pending',
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                random_order REAL DEFAULT (RANDOM())
            )
            '''
        )
        await db.commit()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
async def save_photo_local(file: types.File) -> str:
    ext = os.path.splitext(file.file_path)[1]
    filename = f"{int(asyncio.get_event_loop().time()*1000)}{ext}"
    local_path = os.path.join(UPLOAD_DIR, filename)
    await bot.download_file(file.file_path, destination=local_path)
    return local_path

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ñ–æ—Ç–æ
@dp.message(F.text & ~F.photo)
async def handle_text_only(message: types.Message):
    await message.reply(
        "–ü–æ–∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∫ –Ω–µ–º—É."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start –∏ /help
@dp.message(Command("start"))
@dp.message(Command("help"))
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –≤–∞—à–∏–º —Ç—ë–ø–ª—ã–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º. "
        "–Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∏ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ! ‚ù§Ô∏è"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    caption = message.caption.strip() if message.caption else None
    if not caption:
        await message.reply(
            "–ü–æ–∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º."
        )
        return

    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)

    try:
        photo_path = await save_photo_local(file_info)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            'INSERT INTO wishes (photo_path, message) VALUES (?, ?)',
            (photo_path, caption)
        )
        await db.commit()
        wish_id = cur.lastrowid

    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üéâ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{wish_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{wish_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ FSInputFile
    photo_input = FSInputFile(photo_path)
    await bot.send_photo(
        chat_id=ADMIN_CHAT_ID,
        photo=photo_input,
        caption=f"–ù–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ #{wish_id}:\n{caption}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.callback_query(F.data.startswith("approve:"))
@dp.callback_query(F.data.startswith("reject:"))
async def process_moderation(call: types.CallbackQuery):
    action, id_str = call.data.split(':', 1)
    wish_id = int(id_str)
    status = 'approved' if action == 'approve' else 'rejected'

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE wishes SET status = ? WHERE id = ?', (status, wish_id))
        await db.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await call.message.edit_caption(
        call.message.caption + f"\n\n–°—Ç–∞—Ç—É—Å: {status}",
        reply_markup=None
    )
    await call.answer(
        f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ #{wish_id} {'–æ–¥–æ–±—Ä–µ–Ω–æ' if status=='approved' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'}"
    )

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())