import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile
from databases import Database
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN         = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID") or 0)
UPLOAD_DIR    = os.getenv("UPLOAD_DIR", "uploads")
DATABASE_URL  = os.getenv("DATABASE_URL")

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp  = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Postgres
db = Database(DATABASE_URL)

async def init_db():
    """–°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É uploads –∏ —Ç–∞–±–ª–∏—Ü—É wishes, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã."""
    os.makedirs(UPLOAD_DIR, exist_ok=True)
    await db.connect()
    await db.execute("""
        CREATE TABLE IF NOT EXISTS wishes (
            id           SERIAL PRIMARY KEY,
            photo_path   TEXT   NOT NULL,
            message      TEXT   NOT NULL,
            status       TEXT   NOT NULL DEFAULT 'pending',
            timestamp    TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
            random_order DOUBLE PRECISION DEFAULT RANDOM()
        );
    """)

async def save_photo_local(file: types.File) -> str:
    ext = os.path.splitext(file.file_path)[1]
    fn  = f"{int(asyncio.get_event_loop().time()*1000)}{ext}"
    dst = os.path.join(UPLOAD_DIR, fn)
    await bot.download_file(file.file_path, destination=dst)
    return dst

@dp.message(F.text & ~F.photo)
async def handle_text_only(message: types.Message):
    await message.reply(
        "–ü–æ–∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é."
    )

@dp.message(Command("start"))
@dp.message(Command("help"))
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –ø–æ–∂–µ–ª–∞–Ω–∏–µ, "
        "–∞ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ! ‚ù§Ô∏è"
    )

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    caption = (message.caption or "").strip()
    if not caption:
        return await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º."
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    photo = message.photo[-1]
    info  = await bot.get_file(photo.file_id)
    try:
        path = await save_photo_local(info)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ")
        return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Postgres –∏ –ø–æ–ª—É—á–∞–µ–º ID
    row_id = await db.execute(
        """
        INSERT INTO wishes (photo_path, message)
        VALUES (:path, :msg)
        RETURNING id
        """,
        {"path": path, "msg": caption}
    )

    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üéâ")

    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[[
            types.InlineKeyboardButton(
                text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
                callback_data=f"approve:{row_id}"
            ),
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                callback_data=f"reject:{row_id}"
            )
        ]]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await bot.send_photo(
        chat_id=ADMIN_CHAT_ID,
        photo=FSInputFile(path),
        caption=f"–ù–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ #{row_id}:\n{caption}",
        reply_markup=kb
    )

@dp.callback_query(F.data.startswith("approve:"))
@dp.callback_query(F.data.startswith("reject:"))
async def process_mod(call: types.CallbackQuery):
    action, id_str = call.data.split(":", 1)
    wish_id = int(id_str)
    status  = "approved" if action=="approve" else "rejected"

    await db.execute(
        "UPDATE wishes SET status=:st WHERE id=:id",
        {"st": status, "id": wish_id}
    )

    await call.message.edit_caption(
        call.message.caption + f"\n\n–°—Ç–∞—Ç—É—Å: {status}",
        reply_markup=None
    )
    await call.answer(f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ #{wish_id} {status}")

async def main():
    await init_db()
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ update, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    await bot.delete_webhook()
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling, –ø—Ä–æ–ø—É—Å–∫–∞—è —Å—Ç–∞—Ä—ã–µ
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
