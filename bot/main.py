import os
import logging
import asyncio
import io
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile
from databases import Database
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN         = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID") or 0)
DATABASE_URL  = os.getenv("DATABASE_URL")

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp  = Dispatcher(bot)
db  = Database(DATABASE_URL)

async def init_db():
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É wishes –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ —Ñ–æ—Ç–æ."""
    await db.connect()
    await db.execute("""
        CREATE TABLE IF NOT EXISTS wishes (
            id            SERIAL PRIMARY KEY,
            image_data    BYTEA   NOT NULL,
            message       TEXT    NOT NULL,
            status        TEXT    NOT NULL DEFAULT 'pending',
            timestamp     TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
            random_order  DOUBLE PRECISION DEFAULT RANDOM()
        );
    """)

@dp.message(F.text & ~F.photo)
async def handle_text_only(message: types.Message):
    await message.reply(
        "–ü–æ–∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é."
    )

@dp.message(Command("start"))
@dp.message(Command("help"))
async def cmd_start_help(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é-–ø–æ–∂–µ–ª–∞–Ω–∏–µ–º, "
        "–∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
    )

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    caption = message.caption or ""
    if not caption:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        buf = io.BytesIO()
        await bot.download_file(file_info.file_path, buf)
        data = buf.getvalue()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        row_id = await db.execute(
            """
            INSERT INTO wishes (image_data, message)
            VALUES (:data, :msg)
            RETURNING id
            """,
            {"data": data, "msg": caption}
        )
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ –ë–î")
        return await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üéâ")

    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[[
            types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{row_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{row_id}")
        ]]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Ñ–æ—Ç–æ –∏–∑ –ø–∞–º—è—Ç–∏
    ext = os.path.splitext(file_info.file_path)[1]
    fsfile = FSInputFile(io.BytesIO(data), filename=f"{row_id}{ext}")
    await bot.send_photo(
        chat_id=ADMIN_CHAT_ID,
        photo=fsfile,
        caption=f"–ù–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ #{row_id}:
{caption}",
        reply_markup=kb
    )

@dp.callback_query(F.data.startswith("approve:"))
@dp.callback_query(F.data.startswith("reject:"))
async def process_mod(call: types.CallbackQuery):
    action, id_str = call.data.split(":", 1)
    wish_id = int(id_str)
    status  = "approved" if action == "approve" else "rejected"

    await db.execute(
        "UPDATE wishes SET status=:st WHERE id=:id",
        {"st": status, "id": wish_id}
    )

    await call.message.edit_caption(
        call.message.caption + f"

–°—Ç–∞—Ç—É—Å: {status}",
        reply_markup=None
    )
    await call.answer(f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ #{wish_id} {status}")

async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())